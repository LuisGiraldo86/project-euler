# =================================
# Euler Project. Problem 12
# =================================

"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7'th triangle number would be 1+2+3+4+5+6+7=28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1, 3
 6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over N divisors?

Input Format
------------
First line T, the number of test-cases. Each test-case consists of N in one line.

Constraints
-----------
1 <= T <= 10
1 <= N <= 10^3

Output Format
-------------
For each test-case, print the required answer in one line. 
"""

# solution

from EulerModule import eratosthenes_sieve, count_divisors_with_primes

sieve = eratosthenes_sieve(29100)

primes = [k for k in range(len(sieve)) if sieve[k]]

def first_triangle_divisors_2(N, fact1, fact2, strt=1):

    n = strt
    if n%2==0:
        even_n_nro_div_n, even_n_nro_div_n1 = fact1, fact2
        pdivisors_Tn = fact1*fact2
    else:
        odd_n_nro_div_n, odd_n_nro_div_n1 = fact1, fact2
        pdivisors_Tn = fact1*fact2


    while pdivisors_Tn <= N:
        n+=1
        if n%2 == 0:
            even_n_nro_div_n  = count_divisors_with_primes(n//2, primes)
            even_n_nro_div_n1 = count_divisors_with_primes(n+1, primes)
            pdivisors_Tn = even_n_nro_div_n*even_n_nro_div_n1
        else:
            odd_n_nro_div_n  = even_n_nro_div_n1
            odd_n_nro_div_n1 = count_divisors_with_primes((n+1)//2, primes)
            pdivisors_Tn = odd_n_nro_div_n*odd_n_nro_div_n1
    
    if n%2 == 0:
        return even_n_nro_div_n, even_n_nro_div_n1, (n*(n+1))//2, n
    else:
        return odd_n_nro_div_n, odd_n_nro_div_n1, (n*(n+1))//2, n
    

def list_first_triangle(upper_bound:int)->list:

    lst = [1,3]
    cache = 1
    fact1, fact2 = 1, 2
    for N in range(2,upper_bound+1):
        fact1, fact2, T_n, cache = first_triangle_divisors_2(N, fact1, fact2, strt=cache)
        lst.append(T_n)

    return lst
